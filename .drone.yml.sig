eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9nbwogIHBhdGg6IHNyYy9naXRodWIuY29tL21ldGFsbWF0emUva3JhdXRyZXBvcnRlci1hcGkKCnBpcGVsaW5lOgogIGJ1aWxkOgogICAgaW1hZ2U6IGdvbGFuZzphbHBpbmUKICAgIGNvbW1hbmRzOgogICAgICAtIGFwayBhZGQgLVUgZ2l0IG1ha2UKICAgICAgLSBtYWtlIGZtdCB2ZXQgbGludAogICAgICAtIG1ha2UgYnVpbGQKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2gsIHRhZywgcHVsbF9yZXF1ZXN0IF0KCiAgZG9ja2VyLXRhZzoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzogbWV0YWxtYXR6ZS9rcmF1dHJlcG9ydGVyLWFwaQogICAgRG9ja2VyZmlsZTogRG9ja2VyZmlsZS5hcGkKICAgIHRhZ3M6IFsgJyR7RFJPTkVfVEFHIyN2fScgXQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgdGFnIF0KICAgICAgYnJhbmNoOiBbIHJlZnMvdGFncy8qIF0KCiAgZG9ja2VyLXRhZzoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzogbWV0YWxtYXR6ZS9rcmF1dHJlcG9ydGVyLXNjcmFwZXIKICAgIERvY2tlcmZpbGU6IERvY2tlcmZpbGUuc2NyYXBlcgogICAgdGFnczogWyAnJHtEUk9ORV9UQUcjI3Z9JyBdCiAgICB3aGVuOgogICAgICBldmVudDogWyB0YWcgXQogICAgICBicmFuY2g6IFsgcmVmcy90YWdzLyogXQoKICBkb2NrZXItbGF0ZXN0OgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICByZXBvOiBtZXRhbG1hdHplL2tyYXV0cmVwb3J0ZXItYXBpCiAgICBEb2NrZXJmaWxlOiBEb2NrZXJmaWxlLmFwaQogICAgdGFnczogWyAnbGF0ZXN0JyBdCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0KICAgICAgYnJhbmNoOiBbIG1hc3RlciBdCgogIGRvY2tlci1sYXRlc3Q6CiAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgIHJlcG86IG1ldGFsbWF0emUva3JhdXRyZXBvcnRlci1zY3JhcGVyCiAgICBEb2NrZXJmaWxlOiBEb2NrZXJmaWxlLnNjcmFwZXIKICAgIHRhZ3M6IFsgJ2xhdGVzdCcgXQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCiAgICAgIGJyYW5jaDogWyBtYXN0ZXIgXQoKICBkb2NrZXItZGV2ZWxvcDoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzogbWV0YWxtYXR6ZS9rcmF1dHJlcG9ydGVyLWFwaQogICAgRG9ja2VyZmlsZTogRG9ja2VyZmlsZS5hcGkKICAgIHRhZ3M6IFsgJ2RldmVsb3AnIF0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQogICAgICBicmFuY2g6IFsgZGV2ZWxvcCBdCgogIGRvY2tlci1kZXZlbG9wOgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICByZXBvOiBtZXRhbG1hdHplL2tyYXV0cmVwb3J0ZXItc2NyYXBlcgogICAgRG9ja2VyZmlsZTogRG9ja2VyZmlsZS5zY3JhcGVyCiAgICB0YWdzOiBbICdkZXZlbG9wJyBdCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0KICAgICAgYnJhbmNoOiBbIGRldmVsb3AgXQo.gGPK7fPhQqQbMvjcTPGiJI0m_9qI2pEU2Nhgsddpvp8